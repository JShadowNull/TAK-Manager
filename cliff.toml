# configuration file for git-cliff
[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://tera.netlify.app/docs
body = """
{% if version %}\
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}

### {{ group | upper_first }} {% if group == "added" %}🚀{% elif group == "changed" %}🔄{% elif group == "deprecated" %}⚠️{% elif group == "removed" %}🗑️{% elif group == "fixed" %}🔧{% elif group == "security" %}🔒{% elif group == "performance" %}⚡{% else %}📦{% endif %}

{% for commit in commits | unique(attribute="message") %}
- {{ commit.message | upper_first }}{% if commit.breaking %} ⚠️ BREAKING CHANGE{% endif %}
{%- endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# postprocessors
postprocessors = [
  { pattern = '\$([a-zA-Z_][0-9a-zA-Z_]*)', replace = "\\${{$1}}" }, # escape variables
]

# git-cliff preprocessors
[git]
# parse the conventional commits
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://gitea.local.ubuntuserver.buzz/Jake/Tak-Manager/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "added" },
  { message = "^feature", group = "added" },
  { message = "^add", group = "added" },
  { message = "^fix", group = "fixed" },
  { message = "^bugfix", group = "fixed" },
  { message = "^perf", group = "performance" },
  { message = "^performance", group = "performance" },
  { message = "^change", group = "changed" },
  { message = "^refactor", group = "changed" },
  { message = "^style", group = "changed" },
  { message = "^revert", group = "changed" },
  { message = "^doc", group = "documentation" },
  { message = "^docs", group = "documentation" },
  { message = "^test", group = "testing" },
  { message = "^tests", group = "testing" },
  { message = "^chore\\(release\\): ", skip = true },
  { message = "^chore\\(deps\\)", group = "dependencies" },
  { message = "^chore", group = "other" },
  { message = "^ci", group = "other" },
  { message = "^build", group = "other" },
  { body = ".*security", group = "security" },
  { message = ".*deprecated", group = "deprecated" },
  { message = "^remove", group = "removed" },
  { message = "^delete", group = "removed" },
]
# protect breaking changes from being skipped due to matching a skipped commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42 