1|const { isLoading, error: hasError, message, operation } = useLoader({
2|  namespace: '/docker-manager',
3|  operationType: isRunning ? 'stop' : 'start',
4|  targetId: containerName  // Track specific container
5|});

1|const isTargetOperation = useCallback(() => {
2|  if (!targetId) return true;
3|  return operationState.details?.container === targetId;
4|}, [targetId, operationState.details]);

1|const handleClick = async () => {
2|  if (isLoading) return;
3|  
4|  try {
5|    await executeWithLoading(
6|      () => onClick(),
7|      {
8|        loadingMessage: `${isRunning ? 'Stopping' : 'Starting'} container...`,
9|        emitEvent: `${isRunning ? 'stop' : 'start'}_container`
10|      }
11|    );
12|  } catch (error) {
13|    console.error('Container operation failed:', error);
14|  }
15|};

1|useEffect(() => {
2|  if (!isTargetOperation()) return;
3|
4|  // Clear local loading when operation completes or fails
5|  if (!isOperationInProgress(operationType)) {
6|    setLocalLoading(false);
7|  }
8|}, [isOperationInProgress, operationType, isTargetOperation]);

1|useEffect(() => {
2|  if (!isLoading && !isTransitioning) {
3|    setTargetState(isRunning);
4|  }
5|}, [isRunning, isLoading, isTransitioning]);

1|useEffect(() => {
2|  if (isLoading) {
3|    setIsTransitioning(true);
4|    // When starting operation, set target state to what we expect after the operation
5|    setTargetState(!isRunning);
6|  } else if (isTransitioning) {
7|    // Add a small delay to ensure container status is stable
8|    const timer = setTimeout(() => {
9|      setIsTransitioning(false);
10|    }, 500);
11|    return () => clearTimeout(timer);
12|  }
13|}, [isLoading, isTransitioning, isRunning]);

1|const [currentIcon, setCurrentIcon] = useState(isRunning);

1|const [isTransitioning, setIsTransitioning] = useState(false);

1|const action = isRunning ? 'stop' : 'start';
2|
3|<FontAwesomeIcon 
4|  icon={targetState ? faStop : faPlay} 
5|  data-testid="action-icon"
6|/>

1|if (isLoading || isTransitioning) {
2|  return (
3|    <>
4|      <FontAwesomeIcon 
5|        icon={faSpinner} 
6|        className="animate-spin"
7|      />
8|    </>
9|  );
10|}

1|if (isRunning) return "text-red-500 hover:text-red-600";
2|return "text-green-500 hover:text-green-600";

1|const [targetState, setTargetState] = useState(isRunning);
