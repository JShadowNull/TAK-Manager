# Start of Selection
# syntax=docker/dockerfile:1

# Build stage for frontend
# This stage uses a Node.js base image to build the frontend application.
FROM node:22-slim AS frontend-builder
WORKDIR /app/client

# Install dependencies first (better layer caching)
# Copy the package.json files to the working directory and install the necessary Node.js dependencies.
COPY client/package*.json ./
RUN npm install

# Build the frontend
# Copy the rest of the frontend application files and build the production-ready frontend.
COPY client/ .
RUN npm run build

# Final stage
# This stage uses a Python base image to set up the backend application.
FROM python:3.13.2-slim

WORKDIR /app

# Start of Selection
# Docker repository setup (still needed for CLI)
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc && \
    chmod a+r /etc/apt/keyrings/docker.asc && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
    https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
    > /etc/apt/sources.list.d/docker.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    docker-ce-cli \
    docker-compose-plugin \
    unzip \
    zip \
    libxml2-utils \
    sed && \
    rm -rf /var/lib/apt/lists/*
# End of Selection

# Added separate build stage for Python dependencies
# Python dependencies with Poetry - Install globally
WORKDIR /app/server
COPY server/pyproject.toml ./
COPY server/poetry.lock ./
RUN pip install poetry && \
    poetry config virtualenvs.create false && \
    poetry install

# Copy built frontend and backend files
# Copy the built frontend files from the previous stage and the backend files to the final image.
COPY --from=frontend-builder /app/client/build /app/client/build
COPY server/ /app/server/

# Create required directories
# Create a logs directory and set appropriate permissions.
RUN mkdir -p /app/logs && \
    chmod -R 755 /app/logs

# Command to run the application
# Update to use poetry run for production
CMD ["poetry", "run", "python", "/app/server/app.py"]
# End of Selection
