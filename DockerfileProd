# syntax=docker/dockerfile:1

# Build stage for frontend
FROM node:22-slim AS frontend-builder
WORKDIR /app/client

# Install dependencies first (better layer caching)
COPY client/package*.json ./
RUN npm install

# Build the frontend
COPY client/ .
RUN npm run build

# Final stage
FROM python:3.13.2-slim

WORKDIR /app

# Install required system dependencies
RUN mkdir -p /etc/apt/keyrings && \
    apt-get update && \
    apt-get install -y curl gnupg && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y \
    build-essential \
    zip \
    unzip \
    libxml2-utils \
    sed \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-buildx-plugin \
    docker-compose-plugin && \
    rm -rf /var/lib/apt/lists/*

# Install Python dependencies first (better layer caching)
COPY server/requirements.txt .
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy built frontend and backend files
COPY --from=frontend-builder /app/client/build /app/client/build
COPY server/ /app/server/

# Create required directories
RUN mkdir -p /app/logs && \
    chmod -R 755 /app/logs

# Set production environment
ENV MODE=production

EXPOSE 8989

CMD ["python", "/app/server/app.py"] 
